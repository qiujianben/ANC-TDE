// megafunction wizard: %LPM_MULT%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: lpm_mult 

// ============================================================
// File Name: IP_int32mult32.v
// Megafunction Name(s):
// 			lpm_mult
//
// Simulation Library Files(s):
// 			lpm
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 13.0.0 Build 156 04/24/2013 SJ Full Version
// ************************************************************


//Copyright (C) 1991-2013 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.


//lpm_mult DEVICE_FAMILY="Stratix III" LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=32 LPM_WIDTHB=32 LPM_WIDTHP=64 MAXIMIZE_SPEED=9 dataa datab result
//VERSION_BEGIN 13.0 cbx_cycloneii 2013:04:24:18:08:47:SJ cbx_lpm_add_sub 2013:04:24:18:08:47:SJ cbx_lpm_mult 2013:04:24:18:08:47:SJ cbx_mgl 2013:04:24:18:11:10:SJ cbx_padd 2013:04:24:18:08:47:SJ cbx_stratix 2013:04:24:18:08:47:SJ cbx_stratixii 2013:04:24:18:08:47:SJ cbx_util_mgl 2013:04:24:18:08:47:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463


//synthesis_resources = dsp_18bit 4 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  IP_int32mult32_mult
	( 
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   [31:0]  dataa;
	input   [31:0]  datab;
	output   [63:0]  result;

	wire  [35:0]   wire_mac_mult1_dataout;
	wire  [35:0]   wire_mac_mult2_dataout;
	wire  [35:0]   wire_mac_mult3_dataout;
	wire  [35:0]   wire_mac_mult4_dataout;
	wire  [71:0]   wire_mac_out5_dataout;
	wire aclr;
	wire clken;
	wire clock;

	stratixiii_mac_mult   mac_mult1
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa({dataa[13:0], {4{1'b0}}}),
	.datab({datab[13:0], {4{1'b0}}}),
	.dataout(wire_mac_mult1_dataout),
	.ena({4{clken}}),
	.scanouta(),
	.signa(1'b1),
	.signb(1'b1)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult1.dataa_width = 18,
		mac_mult1.datab_width = 18,
		mac_mult1.signa_internally_grounded = "true",
		mac_mult1.signb_internally_grounded = "true",
		mac_mult1.lpm_type = "stratixiii_mac_mult";
	stratixiii_mac_mult   mac_mult2
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa(dataa[31:14]),
	.datab(datab[31:14]),
	.dataout(wire_mac_mult2_dataout),
	.ena({4{clken}}),
	.scanouta(),
	.signa(1'b1),
	.signb(1'b1)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult2.dataa_width = 18,
		mac_mult2.datab_width = 18,
		mac_mult2.lpm_type = "stratixiii_mac_mult";
	stratixiii_mac_mult   mac_mult3
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa(dataa[31:14]),
	.datab({datab[13:0], {4{1'b0}}}),
	.dataout(wire_mac_mult3_dataout),
	.ena({4{clken}}),
	.scanouta(),
	.signa(1'b1),
	.signb(1'b1)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult3.dataa_width = 18,
		mac_mult3.datab_width = 18,
		mac_mult3.signb_internally_grounded = "true",
		mac_mult3.lpm_type = "stratixiii_mac_mult";
	stratixiii_mac_mult   mac_mult4
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa({dataa[13:0], {4{1'b0}}}),
	.datab(datab[31:14]),
	.dataout(wire_mac_mult4_dataout),
	.ena({4{clken}}),
	.scanouta(),
	.signa(1'b1),
	.signb(1'b1)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult4.dataa_width = 18,
		mac_mult4.datab_width = 18,
		mac_mult4.signa_internally_grounded = "true",
		mac_mult4.lpm_type = "stratixiii_mac_mult";
	stratixiii_mac_out   mac_out5
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa(wire_mac_mult2_dataout),
	.datab(wire_mac_mult4_dataout),
	.datac(wire_mac_mult3_dataout),
	.datad(wire_mac_mult1_dataout),
	.dataout(wire_mac_out5_dataout),
	.dftout(),
	.ena({4{clken}}),
	.loopbackout(),
	.overflow(),
	.saturatechainoutoverflow(),
	.signa(1'b1),
	.signb(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.chainin({1{1'b0}}),
	.rotate(1'b0),
	.round(1'b0),
	.roundchainout(1'b0),
	.saturate(1'b0),
	.saturatechainout(1'b0),
	.shiftright(1'b0),
	.zeroacc(1'b0),
	.zerochainout(1'b0),
	.zeroloopback(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_out5.dataa_width = 36,
		mac_out5.datab_width = 36,
		mac_out5.datac_width = 36,
		mac_out5.datad_width = 36,
		mac_out5.dataout_width = 72,
		mac_out5.operation_mode = "36_bit_multiply",
		mac_out5.lpm_type = "stratixiii_mac_out";
	assign
		aclr = 1'b0,
		clken = 1'b1,
		clock = 1'b0,
		result = wire_mac_out5_dataout[71:8];
endmodule //IP_int32mult32_mult
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module IP_int32mult32 (
	dataa,
	datab,
	result)/* synthesis synthesis_clearbox = 1 */;

	input	[31:0]  dataa;
	input	[31:0]  datab;
	output	[63:0]  result;

	wire [63:0] sub_wire0;
	wire [63:0] result = sub_wire0[63:0];

	IP_int32mult32_mult	IP_int32mult32_mult_component (
				.dataa (dataa),
				.datab (datab),
				.result (sub_wire0));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: AutoSizeResult NUMERIC "1"
// Retrieval info: PRIVATE: B_isConstant NUMERIC "0"
// Retrieval info: PRIVATE: ConstantB NUMERIC "0"
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Stratix III"
// Retrieval info: PRIVATE: LPM_PIPELINE NUMERIC "0"
// Retrieval info: PRIVATE: Latency NUMERIC "0"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: SignedMult NUMERIC "1"
// Retrieval info: PRIVATE: USE_MULT NUMERIC "1"
// Retrieval info: PRIVATE: ValidConstant NUMERIC "0"
// Retrieval info: PRIVATE: WidthA NUMERIC "32"
// Retrieval info: PRIVATE: WidthB NUMERIC "32"
// Retrieval info: PRIVATE: WidthP NUMERIC "64"
// Retrieval info: PRIVATE: aclr NUMERIC "0"
// Retrieval info: PRIVATE: clken NUMERIC "0"
// Retrieval info: PRIVATE: new_diagram STRING "1"
// Retrieval info: PRIVATE: optimize NUMERIC "1"
// Retrieval info: LIBRARY: lpm lpm.lpm_components.all
// Retrieval info: CONSTANT: LPM_HINT STRING "MAXIMIZE_SPEED=9"
// Retrieval info: CONSTANT: LPM_REPRESENTATION STRING "SIGNED"
// Retrieval info: CONSTANT: LPM_TYPE STRING "LPM_MULT"
// Retrieval info: CONSTANT: LPM_WIDTHA NUMERIC "32"
// Retrieval info: CONSTANT: LPM_WIDTHB NUMERIC "32"
// Retrieval info: CONSTANT: LPM_WIDTHP NUMERIC "64"
// Retrieval info: USED_PORT: dataa 0 0 32 0 INPUT NODEFVAL "dataa[31..0]"
// Retrieval info: USED_PORT: datab 0 0 32 0 INPUT NODEFVAL "datab[31..0]"
// Retrieval info: USED_PORT: result 0 0 64 0 OUTPUT NODEFVAL "result[63..0]"
// Retrieval info: CONNECT: @dataa 0 0 32 0 dataa 0 0 32 0
// Retrieval info: CONNECT: @datab 0 0 32 0 datab 0 0 32 0
// Retrieval info: CONNECT: result 0 0 64 0 @result 0 0 64 0
// Retrieval info: GEN_FILE: TYPE_NORMAL IP_int32mult32.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL IP_int32mult32.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL IP_int32mult32.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL IP_int32mult32.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL IP_int32mult32_inst.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL IP_int32mult32_bb.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL IP_int32mult32_syn.v TRUE
// Retrieval info: LIB_FILE: lpm
